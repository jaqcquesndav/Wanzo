// Mocks generated by Mockito 5.4.5 from annotations
// in wanzo/test/features/dashboard/dashboard_repositories_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:io' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wanzo/core/models/api_response.dart' as _i6;
import 'package:wanzo/features/customer/models/customer.dart' as _i3;
import 'package:wanzo/features/customer/repositories/customer_repository.dart'
    as _i9;
import 'package:wanzo/features/dashboard/models/dashboard_data.dart' as _i14;
import 'package:wanzo/features/dashboard/services/dashboard_api_service.dart'
    as _i13;
import 'package:wanzo/features/expenses/models/expense.dart' as _i5;
import 'package:wanzo/features/expenses/repositories/expense_repository.dart'
    as _i11;
import 'package:wanzo/features/sales/models/sale.dart' as _i2;
import 'package:wanzo/features/sales/repositories/sales_repository.dart' as _i7;
import 'package:wanzo/features/transactions/models/transaction.dart' as _i4;
import 'package:wanzo/features/transactions/repositories/transaction_repository.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSale_0 extends _i1.SmartFake implements _i2.Sale {
  _FakeSale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomer_1 extends _i1.SmartFake implements _i3.Customer {
  _FakeCustomer_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_2 extends _i1.SmartFake implements _i4.Transaction {
  _FakeTransaction_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExpense_3 extends _i1.SmartFake implements _i5.Expense {
  _FakeExpense_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_4<T> extends _i1.SmartFake
    implements _i6.ApiResponse<T> {
  _FakeApiResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SalesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSalesRepository extends _i1.Mock implements _i7.SalesRepository {
  MockSalesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i2.Sale>> getAllSales() => (super.noSuchMethod(
        Invocation.method(
          #getAllSales,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Sale>>.value(<_i2.Sale>[]),
      ) as _i8.Future<List<_i2.Sale>>);

  @override
  _i8.Future<List<_i2.Sale>> getSalesByStatus(_i2.SaleStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSalesByStatus,
          [status],
        ),
        returnValue: _i8.Future<List<_i2.Sale>>.value(<_i2.Sale>[]),
      ) as _i8.Future<List<_i2.Sale>>);

  @override
  _i8.Future<_i2.Sale?> getSaleById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getSaleById,
          [id],
        ),
        returnValue: _i8.Future<_i2.Sale?>.value(),
      ) as _i8.Future<_i2.Sale?>);

  @override
  _i8.Future<List<_i2.Sale>> getSalesByCustomer(String? customerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSalesByCustomer,
          [customerId],
        ),
        returnValue: _i8.Future<List<_i2.Sale>>.value(<_i2.Sale>[]),
      ) as _i8.Future<List<_i2.Sale>>);

  @override
  _i8.Future<List<_i2.Sale>> getSalesByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSalesByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Future<List<_i2.Sale>>.value(<_i2.Sale>[]),
      ) as _i8.Future<List<_i2.Sale>>);

  @override
  _i8.Future<_i2.Sale> addSale(_i2.Sale? sale) => (super.noSuchMethod(
        Invocation.method(
          #addSale,
          [sale],
        ),
        returnValue: _i8.Future<_i2.Sale>.value(_FakeSale_0(
          this,
          Invocation.method(
            #addSale,
            [sale],
          ),
        )),
      ) as _i8.Future<_i2.Sale>);

  @override
  _i8.Future<void> updateSale(_i2.Sale? sale) => (super.noSuchMethod(
        Invocation.method(
          #updateSale,
          [sale],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteSale(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSale,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<double> calculateTotalSales(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateTotalSales,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);

  @override
  _i8.Future<int> getSalesCount() => (super.noSuchMethod(
        Invocation.method(
          #getSalesCount,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<double> getTotalReceivables() => (super.noSuchMethod(
        Invocation.method(
          #getTotalReceivables,
          [],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);
}

/// A class which mocks [CustomerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomerRepository extends _i1.Mock
    implements _i9.CustomerRepository {
  MockCustomerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.Customer>> getCustomers() => (super.noSuchMethod(
        Invocation.method(
          #getCustomers,
          [],
        ),
        returnValue: _i8.Future<List<_i3.Customer>>.value(<_i3.Customer>[]),
      ) as _i8.Future<List<_i3.Customer>>);

  @override
  _i8.Future<_i3.Customer?> getCustomer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCustomer,
          [id],
        ),
        returnValue: _i8.Future<_i3.Customer?>.value(),
      ) as _i8.Future<_i3.Customer?>);

  @override
  _i8.Future<_i3.Customer> addCustomer(_i3.Customer? customer) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCustomer,
          [customer],
        ),
        returnValue: _i8.Future<_i3.Customer>.value(_FakeCustomer_1(
          this,
          Invocation.method(
            #addCustomer,
            [customer],
          ),
        )),
      ) as _i8.Future<_i3.Customer>);

  @override
  _i8.Future<_i3.Customer> updateCustomer(_i3.Customer? customer) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCustomer,
          [customer],
        ),
        returnValue: _i8.Future<_i3.Customer>.value(_FakeCustomer_1(
          this,
          Invocation.method(
            #updateCustomer,
            [customer],
          ),
        )),
      ) as _i8.Future<_i3.Customer>);

  @override
  _i8.Future<void> deleteCustomer(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCustomer,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.Customer>> searchCustomers(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCustomers,
          [searchTerm],
        ),
        returnValue: _i8.Future<List<_i3.Customer>>.value(<_i3.Customer>[]),
      ) as _i8.Future<List<_i3.Customer>>);

  @override
  _i8.Future<List<_i3.Customer>> getTopCustomers({int? limit = 5}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopCustomers,
          [],
          {#limit: limit},
        ),
        returnValue: _i8.Future<List<_i3.Customer>>.value(<_i3.Customer>[]),
      ) as _i8.Future<List<_i3.Customer>>);

  @override
  _i8.Future<List<_i3.Customer>> getRecentCustomers({int? limit = 5}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentCustomers,
          [],
          {#limit: limit},
        ),
        returnValue: _i8.Future<List<_i3.Customer>>.value(<_i3.Customer>[]),
      ) as _i8.Future<List<_i3.Customer>>);

  @override
  _i8.Future<_i3.Customer> updateCustomerPurchaseTotal(
    String? customerId,
    double? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCustomerPurchaseTotal,
          [
            customerId,
            amount,
          ],
        ),
        returnValue: _i8.Future<_i3.Customer>.value(_FakeCustomer_1(
          this,
          Invocation.method(
            #updateCustomerPurchaseTotal,
            [
              customerId,
              amount,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Customer>);

  @override
  _i8.Future<int> getUniqueCustomersCountForDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUniqueCustomersCountForDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i10.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i4.Transaction>> getTransactionsForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsForDate,
          [date],
        ),
        returnValue:
            _i8.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i8.Future<List<_i4.Transaction>>);

  @override
  _i8.Future<int> getTransactionCountForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionCountForDate,
          [date],
        ),
        returnValue: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<_i4.Transaction> addTransaction(_i4.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transaction],
        ),
        returnValue: _i8.Future<_i4.Transaction>.value(_FakeTransaction_2(
          this,
          Invocation.method(
            #addTransaction,
            [transaction],
          ),
        )),
      ) as _i8.Future<_i4.Transaction>);

  @override
  _i8.Future<List<_i4.Transaction>> getTransactionsByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i8.Future<List<_i4.Transaction>>.value(<_i4.Transaction>[]),
      ) as _i8.Future<List<_i4.Transaction>>);

  @override
  _i8.Future<_i4.Transaction?> getTransactionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Transaction?>.value(),
      ) as _i8.Future<_i4.Transaction?>);

  @override
  _i8.Future<_i4.Transaction> updateTransaction(_i4.Transaction? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i8.Future<_i4.Transaction>.value(_FakeTransaction_2(
          this,
          Invocation.method(
            #updateTransaction,
            [transaction],
          ),
        )),
      ) as _i8.Future<_i4.Transaction>);

  @override
  _i8.Future<void> deleteTransaction(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<double> getTotalExpensesForDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalExpensesForDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i8.Future<double>.value(0.0),
      ) as _i8.Future<double>);
}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i11.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.Expense>> getAllExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue: _i8.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
      ) as _i8.Future<List<_i5.Expense>>);

  @override
  _i8.Future<_i5.Expense?> getExpenseById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getExpenseById,
          [id],
        ),
        returnValue: _i8.Future<_i5.Expense?>.value(),
      ) as _i8.Future<_i5.Expense?>);

  @override
  _i8.Future<_i5.Expense> addExpense(
    _i5.Expense? expense, {
    List<_i12.File>? imageFiles,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addExpense,
          [expense],
          {#imageFiles: imageFiles},
        ),
        returnValue: _i8.Future<_i5.Expense>.value(_FakeExpense_3(
          this,
          Invocation.method(
            #addExpense,
            [expense],
            {#imageFiles: imageFiles},
          ),
        )),
      ) as _i8.Future<_i5.Expense>);

  @override
  _i8.Future<_i5.Expense> updateExpense(
    _i5.Expense? expense, {
    List<_i12.File>? imageFiles,
    List<String>? attachmentUrlsToRemove,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
          {
            #imageFiles: imageFiles,
            #attachmentUrlsToRemove: attachmentUrlsToRemove,
          },
        ),
        returnValue: _i8.Future<_i5.Expense>.value(_FakeExpense_3(
          this,
          Invocation.method(
            #updateExpense,
            [expense],
            {
              #imageFiles: imageFiles,
              #attachmentUrlsToRemove: attachmentUrlsToRemove,
            },
          ),
        )),
      ) as _i8.Future<_i5.Expense>);

  @override
  _i8.Future<void> deleteExpense(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i5.Expense>> getExpensesByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i8.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
      ) as _i8.Future<List<_i5.Expense>>);

  @override
  _i8.Future<List<_i5.Expense>> getExpensesByCategory(
          _i5.ExpenseCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByCategory,
          [category],
        ),
        returnValue: _i8.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
      ) as _i8.Future<List<_i5.Expense>>);
}

/// A class which mocks [DashboardApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardApiService extends _i1.Mock
    implements _i13.DashboardApiService {
  MockDashboardApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.ApiResponse<_i14.DashboardData>> getDashboardData(
          DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDashboardData,
          [date],
        ),
        returnValue: _i8.Future<_i6.ApiResponse<_i14.DashboardData>>.value(
            _FakeApiResponse_4<_i14.DashboardData>(
          this,
          Invocation.method(
            #getDashboardData,
            [date],
          ),
        )),
      ) as _i8.Future<_i6.ApiResponse<_i14.DashboardData>>);

  @override
  _i8.Future<_i6.ApiResponse<Map<String, double>>> getSalesToday(
          DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSalesToday,
          [date],
        ),
        returnValue: _i8.Future<_i6.ApiResponse<Map<String, double>>>.value(
            _FakeApiResponse_4<Map<String, double>>(
          this,
          Invocation.method(
            #getSalesToday,
            [date],
          ),
        )),
      ) as _i8.Future<_i6.ApiResponse<Map<String, double>>>);

  @override
  _i8.Future<_i6.ApiResponse<int>> getClientsServedToday(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClientsServedToday,
          [date],
        ),
        returnValue:
            _i8.Future<_i6.ApiResponse<int>>.value(_FakeApiResponse_4<int>(
          this,
          Invocation.method(
            #getClientsServedToday,
            [date],
          ),
        )),
      ) as _i8.Future<_i6.ApiResponse<int>>);

  @override
  _i8.Future<_i6.ApiResponse<double>> getTotalReceivables() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalReceivables,
          [],
        ),
        returnValue: _i8.Future<_i6.ApiResponse<double>>.value(
            _FakeApiResponse_4<double>(
          this,
          Invocation.method(
            #getTotalReceivables,
            [],
          ),
        )),
      ) as _i8.Future<_i6.ApiResponse<double>>);

  @override
  _i8.Future<_i6.ApiResponse<double>> getExpensesToday(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesToday,
          [date],
        ),
        returnValue: _i8.Future<_i6.ApiResponse<double>>.value(
            _FakeApiResponse_4<double>(
          this,
          Invocation.method(
            #getExpensesToday,
            [date],
          ),
        )),
      ) as _i8.Future<_i6.ApiResponse<double>>);
}
